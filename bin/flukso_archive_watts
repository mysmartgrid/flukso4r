#!/usr/bin/env ruby
###
## 
# flukso4r: A Ruby library for Flukso 
# Copyright (C) 2010 Mathias Dalheimer (md@gonium.net)
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#  
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
##
###

# Read the flukso4r location 
libpath=File.join(File.dirname(__FILE__), '..', 'lib')
$:.unshift << libpath 
#puts "Using libraty path #{$:.join(":")}" 

require 'flukso'
require 'optparse'
require 'ostruct'

###
## Commandline parser
#
class Optparser
  CODES = %w[iso-2022-jp shift_jis euc-jp utf8 binary]
  CODE_ALIASES = { "jis" => "iso-2022-jp", "sjis" => "shift_jis" }
  #
  # Return a structure describing the options.
  #
  def self.parse(args)
    # The options specified on the command line will be collected in *options*.
    # We set default values here.
    options = OpenStruct.new
    options.inplace = false
    options.encoding = "utf8"
    options.verbose = false
    opts = OptionParser.new do |opts|
      opts.banner = "Usage: #{$0} [options]"
      opts.separator ""
      opts.separator "Specific options:"
      opts.on("-c", "--config FILE", "The file where the configuration lives.") do |file|
        options.config_file = file
      end
      # Boolean switch.
      opts.on("-v", "--verbose", "Run verbosely") do |v|
        options.verbose = v
      end
      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end
    opts.parse!(args)
    options
  end
end

###
## Script startup
#
options = Optparser.parse(ARGV)
$verbose = options.verbose
if options.config_file == nil
  puts "Please provide a configuration file... (-h for details)."
  exit(-1);
end
if not File.exists?(options.config_file) 
  puts " Configuration file #{options.config_file} not found - no database configuration available!"
  exit(-3);
else
  $CONFIG=YAML.load_file(options.config_file);
  puts "Using this configuration:" if $verbose
  puts "#{$CONFIG}" if $verbose
  dbfile=$CONFIG['DB_FILE']
end
if $verbose
  puts " Using database file #{dbfile}"
end
# check and expand paths.
if not File.exists?(dbfile)
  puts " Database does not exist - please create one. Aborting."
  exit(-2);
end


# No authentication by now.
auth=Flukso::HTTPAuth.new("", "");
api=Flukso::API.new(auth);
query=Flukso::QueryReadings.new($CONFIG["ACCESS_KEY"], :hour, :watt)
begin
  readings=query.execute(api);
rescue Exception => e
  puts "Query failed: #{e}"
  exit(-10);
end

# Remove NaN elements - NaN Handling in Ruby sucks.
clean_readings = readings.map{|reading|
  #puts "checking #{reading.value} of class #{reading.value.class}"
  if reading.value.class==Float 
    if reading.value.nan?
      nil;
    else
      reading
    end
  else
    reading;
  end
}.compact

if $verbose
  clean_readings.each{|reading|
    puts reading
  }
end

# TODO: 
# insert all elements that have a later timestamp than the last reading.

db=Flukso::FluksoDB.open($CONFIG["DB_FILE"], $CONFIG["DB_TABLE_NAME"]);
begin
  last=db.find_reading_last();
  puts "Last reading: #{last}"
rescue Flukso::ElementNotFoundError => e
  puts "Empty database - not able to provide last reading."
end

db.close
